{{ 'pre-checkout.css' | asset_url | stylesheet_tag }}
{{ 'global.js' | asset_url | script_tag }}

<div class="hidden current-time">{{ 'now' | date: '%H:%M' }}</div>
<div class="main-pre-checkout">
  {% comment %} header {% endcomment %}
  <div class="padding-global main-pre-checkout-header">
    <div class="container-large-modified main-pre-checkout-header-content">
      <a
        href="{{ routes.root_url }}"
        class="header__heading-link link link--text focus-inset center"
      >
        <div class="main-pre-checkout-header-logo">
          <img src="{{ settings.logo | image_url: width: 1000 }}" loading="lazy" style="width:100%">
        </div>
      </a>
      <a href="{{ routes.cart_url }}" class="icon-cart-pre-checkout">
        {% render 'icon-cart' %}
      </a>
    </div>
  </div>

  {% comment %} content {% endcomment %}
  <div class="main-pre-checkout-content">
    <div class="pre-checkout-overlay">
      <span class="hidden">Overlay</span>
    </div>
    <div class="padding-global h-full">
      <div class="container-large-modified h-full">
        <div class="pre-checkout-content h-full">
          <div class="pre-checkout-overlay-left">
            <span class="hidden">Overlay</span>
          </div>

          <div class="pre-checkout-left padding-section-medium">
            <div class="hidden pre-checkout-left-overlay"></div>

            <div class="delivery-heading margin-bottom margin-medium">
              {{ 'pre-checkout.delivery_details.title' | t }}
            </div>

            <div
              class="flex margin-bottom margin-medium delivery-details"
              style="grid-column-gap: 16px; flex-wrap: wrap"
            >
              <div class="flex flex-col region text-14">
                <label for="Area" class="checkout_section-label">
                  {{- 'pre-checkout.delivery_details.region' | t }} *</label
                >
                <select name="" id="Area" class="checkout_section-select area w-select text-14-all">
                  <option value="">{{ 'pre-checkout.select_one' | t }}</option>
                </select>
                <span class="validate-schedule">
                  {{ 'pre-checkout.delivery_details.region' | t }}
                  {{ 'pre-checkout.blank_field' | t }}
                </span>
              </div>

              <div class="flex flex-col district text-14">
                <label for="'District" class="checkout_section-label">
                  {{- 'pre-checkout.delivery_details.district' | t }} *</label
                >
                <select name="" id="District" class="checkout_section-select district w-select text-14-all">
                  <option value="">
                    {{ 'pre-checkout.select_one' | t -}}
                  </option>
                </select>

                <span class="validate-schedule">
                  {{ 'pre-checkout.delivery_details.district' | t }}
                  {{ 'pre-checkout.blank_field' | t }}
                </span>
              </div>
            </div>

            <div class="delivery-district-description text-size-small margin-bottom margin-medium mb-14 ">
              {{ 'pre-checkout.delivery_details.description' | t | newline_to_br }}
            </div>

            <div class="delivery-heading margin-bottom margin-small">
              {{ 'pre-checkout.delivery_schedule.title' | t }}
            </div>
            <div class="margin-bottom mb-14 text-14-all">
              <div class="text-display-inline text-14">{{ 'pre-checkout.delivery_schedule.location' | t }}&nbsp;</div>
              <div id="delivery-location" class="checkout_delivery-location text-14"></div>
              <div class="text-14">{{ 'pre-checkout.delivery_schedule.select_time' | t }}</div>
            </div>

            <div class="margin-medium m-14" style="margin-left: 0; margin-right: 0; position: relative">
              <div class="icon-schedule back" onclick="onSchedule('back')">
                <span class="left"></span>
              </div>
              <div class="icon-schedule next" onclick="onSchedule('next')">
                <span class="right"></span>
              </div>

              <div
                class="delivery-schedule-wrapper flex flex-col timeslot"
                id="delivery-schedule-wrapper"
                {% comment %} onmousedown="return false" {% endcomment %}
              >
                <div class="delivery-schedule-item-date-wrapper text-14"></div>
                <div class="delivery-schedule-item-time-wrapper text-14"></div>
                <span class="validate-schedule">
                  {{ 'pre-checkout.delivery_schedule.time_slot' | t }}
                  {{ 'pre-checkout.blank_field' | t }}
                </span>
              </div>
            </div>

            <div class="delivery-heading margin-bottom margin-small">
              {{ 'pre-checkout.delivery_option.title' | t }}
            </div>
            <div class="checkout_field-wrapper margin-bottom margin-small delivery-option text-14">
              <label for="Area-2" class="checkout_section-label">
                {{- 'pre-checkout.delivery_option.label' | t | newline_to_br -}}
              </label>
              <div class="flex items-center text-14-all">
                <input
                  type="radio"
                  id="doorstep"
                  name="delivery-option"
                  value="{{ 'pre-checkout.delivery_option.option1' | t }}"
                >
                <label for="doorstep">{{ 'pre-checkout.delivery_option.option1' | t }}</label>
              </div>
              <div class="flex items-center text-14-all">
                <input
                  type="radio"
                  id="concierge"
                  name="delivery-option"
                  value="{{ 'pre-checkout.delivery_option.option2' | t }}"
                >
                <label for="concierge">{{ 'pre-checkout.delivery_option.option2' | t }}</label>
              </div>
              <div class="flex items-center text-14-all">
                <input
                  type="radio"
                  id="contact-me"
                  name="delivery-option"
                  value="{{ 'pre-checkout.delivery_option.option3' | t }}"
                >
                <label for="contact-me">{{ 'pre-checkout.delivery_option.option3' | t }}</label>
              </div>
            </div>

            <div class="flex items-center justify-between pre-checkout-bottom">
              <button
                {% if cart == empty or cart.total_price < 50000 %}
                  disabled
                {% endif %}
                type="button"
                class="pre-checkout-button text-14"
                onclick="onCheckout()"
              >
                {{ 'pre-checkout.checkout' | t }}
              </button>
            </div>

            {% comment %} footer left {% endcomment %}
            <footer class="footer-left">
              <a
                href="/policies/refund-policy"
                target="_blank"
                class="footer-left-pre-checkout-link"
              >
                {{ 'pre-checkout.refund_policy' | t }}
              </a>
              <a
                href="/policies/privacy-policy"
                target="_blank"
                class="footer-left-pre-checkout-link"
              >
                {{ 'pre-checkout.privacy_policy' | t }}
              </a>
            </footer>
          </div>

          <div class="pre-checkout-right">
            <div class="hidden pre-checkout-right-overlay">
              <span class="hidden"></span>
            </div>
            <div class="padding-section-medium">
              <div class="div-block-4-copy gridspan1">
                {% assign sortedItems = cart.items | sort: 'sku' %}
                {%- for item in sortedItems -%}
                  <div class="flex cart-item-details text-14">
                    <div class="cart-item-img">
                      <img
                        src="{{ item.image | image_url: width: 1000 }}"
                        alt="{{ item.image.alt | escape }}"
                        loading="lazy"
                        width="62"
                        height="62"
                      >

                      <div class="cart-item-quantity">{{- item.quantity -}}</div>
                    </div>

                    <div class="cart-item-name flex flex-col text-14-all">
                      <span>{{- item.title -}}</span>
                    </div>

                    <div class="cart-item-price price-custom text-14-all">
                      <span>{{ item.final_line_price | money }}</span>
                    </div>
                  </div>
                {%- endfor -%}
              </div>

              <div class="discount-code-seperator">
                <span class="hidden">Line</span>
              </div>

              <div class="total-amount flex flex-col">
                <div class="flex justify-between items-center">
                  <span class="text-block-3">{{ 'pre-checkout.summary.discount' | t }}</span>
                  <span>{{ 'pre-checkout.summary.calculated_on_the_next_step' | t }}</span>
                </div>
                <div class="flex justify-between items-center sub-total">
                  <span class="text-block-3">{{ 'pre-checkout.summary.subtotal' | t }}</span>
                  <div class="price-custom" style="display: inline-block">
                    {{ cart.total_price | money }}
                  </div>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-block-3">{{ 'pre-checkout.summary.shipping' | t }}</span>
                  <span>{{ 'pre-checkout.summary.calculated_on_the_next_step' | t }}</span>
                </div>
              </div>

              <div class="discount-code-seperator">
                <span class="hidden">Line</span>
              </div>

              <div class="total-amount">
                <div class="flex justify-between items-center">
                  <span class="text-style-grand-total-copy text-17">{{ 'pre-checkout.summary.total' | t }}</span>
                  <div class="flex items-center">
                    <span class="text-block-3-copy text-12">HKD&nbsp;&nbsp;&nbsp;&nbsp;</span>
                    <div class="text-style-grand-total price-custom text-17" style="display: inline-block">
                      {{ cart.total_price | money }}
                    </div>
                  </div>
                </div>
              </div>

              <div class="discount-code-seperator">
                <span class="hidden">Line</span>
              </div>
            </div>
          </div>

          <div class="toggle-order-summary" onclick="toggleOrderSummary()">
            <div style="display:flex; align-items:center; color: #ac1b17" class="text-14">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                aria-hidden="true"
                role="img"
                class="iconify iconify--ph"
                width="18px"
                height="18px"
                preserveAspectRatio="xMidYMid meet"
                viewBox="0 0 256 256"
              >
                <path fill="#ac1b17"
                  d="M100 216a20 20 0 1 1-20-20a20.1 20.1 0 0 1 20 20Zm84-20a20 20 0 1 0 20 20a20.1 20.1 0 0 0-20-20Zm49.3-120.7l-24.2 84.4a28.1 28.1 0 0 1-26.9 20.3H81.8a28.1 28.1 0 0 1-26.9-20.3L30.8 75.5c0-.1-.1-.3-.1-.4L21.8 44H12a12 12 0 0 1 0-24h12.8a20.3 20.3 0 0 1 19.3 14.5L51.3 60h170.4a12.1 12.1 0 0 1 11.6 15.3ZM205.8 84H58.2l19.7 69.1a4.1 4.1 0 0 0 3.9 2.9h100.4a4.1 4.1 0 0 0 3.9-2.9Z">
                </path>
              </svg>
              &nbsp;&nbsp;
              <span class="toggle-order-summary-text">{{ 'pre-checkout.show_order_summary' | t }}</span>
              &nbsp;
              <div style="width: 10px; height: 10px; margin-top: 5px" class="flex arrow-down">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                  aria-hidden="true"
                  role="img"
                  class="iconify iconify--ic"
                  width="100%"
                  height="100%"
                  preserveAspectRatio="xMidYMid meet"
                  viewBox="0 0 24 24"
                  style="rotate: 90deg; font-weight: 600"
                >
                  <path fill="currentColor" d="M6.23 20.23L8 22l10-10L8 2L6.23 3.77L14.46 12z" />
                </svg>
              </div>
            </div>

            <div class="price-custom" style="display: inline-block">
              {{ cart.total_price | money }}
            </div>
          </div>

          {% comment %}
            <div class="show-logo-mobile">
              <a
                href="{{ routes.root_url }}"
                class="header__heading-link link link--text focus-inset center"
              >
                <img src="{{ settings.logo | image_url: width: 1000 }}" loading="lazy" style="width:100%; height: 100%">
              </a>
            </div>
          {% endcomment %}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  
  {% comment %} check empty object {% endcomment %}
    const isEmptyObject = (obj) => {
      return Object.keys(obj).length === 0;
    }

    {% comment %} format date {% endcomment %}
    const formatDate = (date) => {
      let d = new Date(date),
          month = '' + (d.getMonth() + 1),
          day = '' + d.getDate(),
          year = d.getFullYear();

      if (month.length < 2)
          month = '0' + month;
      if (day.length < 2)
          day = '0' + day;

      return [year, month, day].join('-');
    }
    {% comment %} render date {% endcomment %}
    const generateDate = (day_difference = 1, cutoff_time) => {
        const currentTimeStore = document.querySelector(".hidden.current-time").innerText || "";
        let pageUrl = '{{ page.url }}';
        let locale = "en-US";
        if(pageUrl.includes('zh')) {
            locale = "zh-CN";
        } else if(pageUrl.includes('de')){
            locale = "de-DE";
        } else{
            locale = "en-US";
        }

        const options = { weekday: 'long', month: 'short', day: 'numeric', };

        let now = new Date();
        if (day_difference === 0) {
          {% comment %} let currentTime = now.toTimeString();
          currentTime = currentTime.split(' ')[0].substr(0, 5); {% endcomment %}
          if(cutoff_time <= currentTimeStore) {
            now.setDate(now.getDate() + 1);
          }
        }else {
          if(cutoff_time > currentTimeStore){
            now.setDate(now.getDate() + day_difference);
          } else{
            now.setDate(now.getDate() + day_difference + 1);
          }
        }

        return Array.from({ length: 28 }, (_, i) => {
            let date = new Date(now);
            date.setDate(date.getDate() + i);
            const dateArray = date.toLocaleString(locale, options).replace(',', '').replace('.', '').split(" ");
            const newDateString = locale === "zh-CN" ?  dateArray[0] : dateArray[0] + " " + dateArray[2] + " " + dateArray[1];
            return {
            shortTitle: date.toLocaleString('en-US', {
                weekday: 'short'
            }),
            title: newDateString,
            value: formatDate(date),
            times: []
            };
        });
    }

    const areaSelect = document.querySelector('.checkout_section-select.area');
    const deliveryLocation = document.querySelector('#delivery-location');
    let areaElementHtml = `<option value="" class="area-item">{{ 'pre-checkout.select_one' | t }}</option>`;
    const districtSelect = document.querySelector('.checkout_section-select.district');
    let districtHtml = `<option value="" class="district-item">{{ 'pre-checkout.select_one' | t }}</option>`;
    const regionElement = document.querySelector(".region")
    const areaValidate = regionElement.querySelector(".validate-schedule");
  
    const districtElement = document.querySelector(".district")
    const districtValidate = districtElement.querySelector(".validate-schedule");
  
    const timeSlotElement = document.querySelector(".timeslot")
    const timeSlotValidate = timeSlotElement.querySelector(".validate-schedule");
  
    const timeByDateStorage = localStorage.getItem('timeByDate');
  
    const inputRadio = document.querySelectorAll('input[name="delivery-option"]');
  
    const cutoffTimeStorage = localStorage.getItem('cutoffTime');
    const dayDiffStorage = localStorage.getItem('dayDiff');

     // delivery district
    const areas = [
        {
        label: 'Hong Kong Island',
        value: 'Hong Kong Island',
        districts: [
            {
            label: 'Central & Western',
            value: 'Central & Western',
            },
            {
            label: 'Wan Chai',
            value: 'Wan Chai',
            },
            {
            label: 'Eastern',
            value: 'Eastern',
            },
            {
            label: 'Southern',
            value: 'Southern',
            },
        ]
        },
        {
        label: 'Hong Kong Island - Piers',
        value: 'Hong Kong Island - Piers',
        districts: [
            {
            label: 'Central & Western - Pier 4 - Lamma',
            value: 'Central & Western - Pier 4 - Lamma',
            },
            {
            label: 'Central & Western - Pier 5 - Cheung Chau North & South',
            value: 'Central & Western - Pier 5 - Cheung Chau North & South',
            },
            {
            label: 'Central & Western - Pier 6 - Lantau, Mui Wo',
            value: 'Central & Western - Pier 6 - Lantau, Mui Wo',
            }
        ]
        },
        {
        label: 'Kowloon',
        value: 'Kowloon',
        districts: [
            {
            label: 'Yau Tsim Mong (Yau Ma Tei / Tsim Sha Tsui / Mong Kok / Kowloon West)',
            value: 'Yau Tsim Mong (Yau Ma Tei / Tsim Sha Tsui / Mong Kok / Kowloon West)',
            },
            {
            label: 'Sham Shui Po',
            value: 'Sham Shui Po',
            },
            {
            label: 'Kowloon City',
            value: 'Kowloon City',
            },
            {
            label: 'Wong Tai Sin',
            value: 'Wong Tai Sin',
            },
            {
            label: 'Kwun Tong',
            value: 'Kwun Tong',
            }
        ]
        },
        {
        label: 'New Territories 1',
        value: 'New Territories 1',
        districts: [
            {
            label: 'Kwai Tsing',
            value: 'Kwai Tsing',
            },
            {
            label: 'Tsuen Wan',
            value: 'Tsuen Wan',
            },
            {
            label: 'Tuen Mun',
            value: 'Tuen Mun',
            },
            {
            label: 'Yuen Long',
            value: 'Yuen Long',
            }
        ]
        },

        {
        label: 'New Territories 2',
        value: 'New Territories 2',
        districts: [
            {
            label: 'North',
            value: 'North',
            },
            {
            label: 'Tai Po',
            value: 'Tai Po',
            },
            {
            label: 'Sha Tin',
            value: 'Sha Tin',
            },
            {
            label: 'Sai Kung',
            value: 'Sai Kung',
            },
            {
            label: 'Sai Kung - Pier 1 - Sai Kung Islands',
            value: 'Sai Kung - Pier 1 - Sai Kung Islands',
            }
        ]
        },
        {
        label: 'Islands',
        value: 'Islands',
        districts: [
            {
            label: 'Islands - Discovery Bay',
            value: 'Islands - Discovery Bay',
            },
            {
            label: 'Islands - Tung Chung North & South',
            value: 'Islands - Tung Chung North & South',
            },
            {
            label: 'Islands - Yat Tung Estate North & South',
            value: 'Islands - Yat Tung Estate North & South',
            },
            {
            label: 'Islands - Ma Wan',
            value: 'Islands - Ma Wan',
            }
        ]
        },
    ]

    const url = 'https://msh.api.vmodev.link/api';
    let cutoffTime = null;
    let dayDiff = 1;
    let dates = [];
    let defaultDates = [];
    let areaParam = '';
    let districtParam = '';
    const TIME_BY_DATE_DEFAULT = {
        region: "",
        district: "",
        schedule: {
        id_schedule_default: null,
        date: "",
        order_name: "",
        time: "",
        id_schedule: ""
        },
        option: ""
    }

    let timeByDate = {
        region: (timeByDateStorage ? JSON.parse(timeByDateStorage)?.region : areas[0].value) || "",
        district: JSON.parse(timeByDateStorage)?.district || "",
        schedule: {
          id_schedule_default:  JSON.parse(timeByDateStorage)?.schedule?.id_schedule_default || null,
          date: JSON.parse(timeByDateStorage)?.schedule?.date || "",
          order_name: JSON.parse(timeByDateStorage)?.schedule?.order_name || "",
          time: JSON.parse(timeByDateStorage)?.schedule?.time || "",
          id_schedule: JSON.parse(timeByDateStorage)?.schedule?.id_schedule || null,
        },
        option: JSON.parse(timeByDateStorage)?.option || ""
    }
    
    if (timeByDate.region && timeByDate.district) {
        deliveryLocation.innerHTML = `${timeByDate.region} / ${timeByDate.district}`
    } else if (timeByDate.region && !timeByDate.district) {
        deliveryLocation.innerHTML = timeByDate.region;
    } else {
        deliveryLocation.innerHTML = ""
    }
    
    
    let districts = timeByDate.region 
                    ? areas.find((area) => area.value === timeByDate.region).districts
                    : areas[0].districts;

    const renderDistricts = (arr) => {
        districtHtml = '<option value="" class="district-item">{{ 'pre-checkout.select_one' | t }}</option>'
        arr.forEach((district) => {
            districtHtml += `
            <option value="${district.value}" class="district-item">${district.label}</option>
            `
        })
        districtSelect.innerHTML = districtHtml;
        districtSelect.addEventListener('change', (event) => {
            const { value } = event.target;
            timeSlotValidate.classList.remove('invalid');
            
            deliveryLocation.innerHTML = `${areaSelect.value} / ${value}`;
            timeByDate = {
            ...timeByDate,
            district: value,
            schedule: TIME_BY_DATE_DEFAULT.schedule
            }
            localStorage.setItem('timeByDate', JSON.stringify(timeByDate));

            if(value !== "") {
                districtValidate.classList.remove('invalid');
                districtSelect.classList.remove('invalid');
                fetchData(encodeURIComponent(timeByDate?.region), encodeURIComponent(timeByDate?.district))
            }

            if(value === "") {
                renderTime(0, "default");
            }
        })
    }

    if(timeByDate?.region) {
        renderDistricts(districts);
    }

    areas.forEach((area) => {
        areaElementHtml += `
        <option value="${area.value}" class="area-item">${area.label}</option>
        `
    })

    areaSelect.innerHTML = areaElementHtml;
    areaSelect.addEventListener('change', (event) => {
        const { value } = event.target;
        areaSelect.value = value;
        deliveryLocation.innerHTML = value;
        districtValidate.classList.remove('invalid');
        districtSelect.classList.remove('invalid');
        timeSlotValidate.classList.remove('invalid');
        if(value !== "") {
            areaValidate.classList.remove('invalid');
            areaSelect.classList.remove('invalid');
        }
        const districtsByArea = areas.find((area) => area.value === value)
        districts = districtsByArea ? districtsByArea.districts : [];
        renderDistricts(districts);
        timeByDate = {
            ...timeByDate,
            region: value,
            district: "",
            schedule: TIME_BY_DATE_DEFAULT.schedule
        }
        localStorage.setItem('timeByDate', JSON.stringify(timeByDate));
        {% comment %} fetchData(encodeURIComponent(areaSelect.value)) {% endcomment %}
        renderTime(0, "default");
    })

    areaSelect.value = timeByDate.region;
    districtSelect.value = timeByDate.district;

    // delivery schedule
    let scheduleDateElement = document.querySelector(".delivery-schedule-item-date-wrapper");
    let scheduleDateHtml = "";
    let scheduleTimeElement = document.querySelector(".delivery-schedule-item-time-wrapper");
    let scheduleTimeHtml = "";

    const onSelectItemValue = (item) => {
    const isMaximumOrder = item.classList.contains('maximum-order');
    if(!isMaximumOrder) {
        const timeValuesSelected = document.querySelectorAll('.delivery-schedule-item-time-value.selected');

        const timeValue = item.querySelector(".time-slot");

        for (timeSelected of timeValuesSelected) {
        timeSelected.classList.remove('selected');
        }
        timeSlotValidate.classList.remove('invalid');
    
        item.classList.add('selected');
        const scheduleTimeByDate = {
        id_schedule_default: Number(item.id),
        id_schedule: Number(item.id),
        date: item.title,
        time: timeValue.innerText
        }
        timeByDate = {
        ...timeByDate,
        schedule: scheduleTimeByDate
        }
    
        localStorage.setItem('timeByDate', JSON.stringify(timeByDate));
    
        dates = dates.map((date) => ({
        ...date,
        times: date.times.map((time) => {
            const isSelected = item.title === date.value && timeValue.innerText === time.comment;
    
            return {
            ...time,
            selected: isSelected
            }
        })
        }))
    }
    }
    
   
    const renderDate = (count) => {
        scheduleDateHtml = "";
      
        const renderDateHtml = (arr) => {
           arr.forEach((date) => {
            const dateArr = date.title.split(" ");
            if(dateArr.length > 1) {
              scheduleDateHtml += `
              <div class="delivery-schedule-item-date flex flex-col center">
                <span>${dateArr[0]}</span>
                <span>${dateArr[1] + " " + dateArr[2]}</span>
              </div>`
            } else {
              scheduleDateHtml += `
              <div class="delivery-schedule-item-date flex flex-col center">
                <span>${dateArr[0]}</span>
              </div>`
            }
          })
          return scheduleDateElement.innerHTML = scheduleDateHtml;
        }
      
        if(!count || count === 0){
          renderDateHtml(dates.slice(0, 7));
        } else{
          switch (count) {
            case 1:
                renderDateHtml(dates.slice(7, 14));
                break;
      
            case 2:
                renderDateHtml(dates.slice(14, 21));
                break;
      
            case 3:
                renderDateHtml(dates.slice(-7));
                break;
      
            default:
                return scheduleDateElement.innerHTML = "";
          }
        }
    }

    const renderTime = (count, type) => {
        scheduleTimeHtml = '';
        const renderTimeHtml = (arr) => {
          arr.forEach((item) => {
            scheduleTimeHtml += `
              <div class="delivery-schedule-item-time">
              ${!item.times.length
              ? `<div class="delivery-schedule-item-time-no-delivery text-14">{{ 'pre-checkout.no_delivery' | t }}</div>` 
              : `
              <div class="delivery-schedule-item-time-value-wrapper">
                ${item.times.map((i) => {
                    return `<div class="delivery-schedule-item-time-value ${i.selected ? "selected" : ""} ${i?.is_maximum_order ? "maximum-order" : ""}" id="${i.id_schedule || i.id_schedule_default}" title="${item.value}"
                      onclick="onSelectItemValue(this)"
                      >
                        <div class="time-slot">${i.comment}</div>
                        <div class="icon-check">
                          <svg
                            class="icon icon-checkmark color-foreground-text"
                            aria-hidden="true"
                            focusable="false"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 12 9"
                            fill="none"
                          >
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M11.35.643a.5.5 0 01.006.707l-6.77 6.886a.5.5 0 01-.719-.006L.638 4.845a.5.5 0 11.724-.69l2.872 3.011 6.41-6.517a.5.5 0 01.707-.006h-.001z" fill="#30b90e"/>
                          </svg>
                        </div>
                      </div>`
                }).join(" ")}
              </div>`
              }
              </div>`
          })
          return scheduleTimeElement.innerHTML = scheduleTimeHtml;
        }
    
        if (type && type === "default") {
          renderTimeHtml(defaultDates.slice(0, 7));
        } else if(!count || count === 0){
          renderTimeHtml(dates.slice(0, 7));
        } else{
          switch (count) {
            case 1:
              renderTimeHtml(dates.slice(7, 14));
              break;
      
            case 2:
              renderTimeHtml(dates.slice(14, 21));
              break;
      
            case 3:
              renderTimeHtml(dates.slice(-7));
              break;
      
            default:
              return scheduleTimeElement.innerHTML = "";
          }
        }
    }

    let optionExits = false;

    if(inputRadio.length) {
    for (let i of inputRadio) {
        if(i.value === timeByDate.option) {
          optionExits = true;
        }
    }
    }

    timeByDate = {
    ...timeByDate,
    option: optionExits ? timeByDate.option : inputRadio[0].value
    }
    localStorage.setItem('timeByDate', JSON.stringify(timeByDate));
  
    (async () => {
        const getCutOffTime = async () => {
            try {
                const res = await fetch(`${url}/rule-order`);
                const data = await res.json();
                if(data.response) {
                    const { cutoff_time, day_difference } = data.response;
                    cutoffTime = cutoff_time;
                    if(Number.isInteger(day_difference)) {
                        dayDiff = Number(day_difference);
                        dates = generateDate(day_difference, cutoff_time);
                        defaultDates = generateDate(day_difference, cutoff_time);
                    }
                }
            } catch (error) {
                console.log('error cutoff', error);
            }
        }
        await getCutOffTime();
        renderDate();
        renderTime();
    
        if(timeByDate?.region && timeByDate?.district) {
            fetchData(encodeURIComponent(timeByDate.region),encodeURIComponent(timeByDate.district));
        }
        
    })();

    const fetchData = async (area = '', district = '') => {
      const controller = new AbortController();
      const signal = controller.signal;
    
      try {
        const res = await fetch(`${url}/schedule-order?area=${area}&district=${district}&fromDate=${dates[0].value}&toDate=${dates[dates.length - 1].value}`, { signal });
        const data = await res.json();
        if(data.response){
          const scheduleDefault = data.response.scheduleDefault;
          const schedule = data.response.schedule;
          const scheduleExist = data.response.scheduleExist;
          const timeByDateStorageOld = localStorage.getItem('timeByDate');
          const timeByDateStorageSchedule = timeByDateStorageOld ? JSON.parse(timeByDateStorageOld).schedule : null;
  
          dates = dates.map((date) => {
            const isScheduleExits = !!scheduleExist[date.value];
    
            return {
              ...date,
              times: ((isScheduleExits ? schedule[date.value] : scheduleDefault[date.shortTitle]) || [])
              .map((i) => {
                const isSelected = (i.comment === timeByDateStorageSchedule?.time && date.value === timeByDateStorageSchedule?.date
                && (i.id_schedule === timeByDateStorageSchedule?.id_schedule || i.id_schedule_default === timeByDateStorageSchedule?.id_schedule_default) 
                && !i?.is_maximum_order)
                || false;
  
                return {
                    ...i,
                    selected: isSelected
                }
              })
            }
          })
  
          renderTime(nextCount);
        }
      } catch (error) {
        console.log('error', error);
      }
  }

    let nextCount = 0;
    let backCount = 0;

    const onSchedule = (type) => {
        const iconNextElement = document.querySelector(".icon-schedule.next");
        const iconBackElement = document.querySelector(".icon-schedule.back");
        const element = document.getElementById("delivery-schedule-wrapper");
        if (type === 'next' && nextCount < 5) {
            nextCount++;
            backCount++;
            element.scrollLeft += 678;
            iconBackElement.style.visibility = "visible";
            renderDate(nextCount);
            if(!timeByDate.region || !timeByDate.district){
                renderTime(nextCount, "default");
            }else{
                renderTime(nextCount);
            }
            const dateTimes = document.querySelectorAll('.delivery-schedule-item-date');
            for (date of dateTimes){
                date.classList.add("animation-next");
                date.classList.remove("animation-back");
            }
        
            const timeValues = document.querySelectorAll('.delivery-schedule-item-time');
            for (time of timeValues){
                time.classList.add("animation-next");
                time.classList.remove("animation-back");
            }
        } else {
            element.scrollLeft -= 678;
            backCount--;
            nextCount--;
            iconNextElement.style.visibility = "visible";
            renderDate(nextCount);
            if(!timeByDate.region || !timeByDate.district){
                renderTime(nextCount, "default");
            }else{
                renderTime(nextCount);
            }
            const dateTimes = document.querySelectorAll('.delivery-schedule-item-date');
            for (date of dateTimes){
                date.classList.remove("animation-next");
                date.classList.add("animation-back");
            }
        
            const timeValues = document.querySelectorAll('.delivery-schedule-item-time');
            for (time of timeValues){
                time.classList.remove("animation-next");
                time.classList.add("animation-back");
            }
        }
        
        if (nextCount === 3) {
            iconNextElement.style.visibility = "hidden";
        }
        
        if (backCount === 0) {
            iconBackElement.style.visibility = "hidden";
        }
    }

    // delivery option
    if(inputRadio) {
        for (const radio of inputRadio) {
        radio.checked = (timeByDate.option || JSON.parse(timeByDateStorage)?.option) === radio.value;
        radio.addEventListener('change', (event) => {
            radio.checked = true;
        
            timeByDate = {
            ...timeByDate,
            option: event.target.value
            }
            localStorage.setItem('timeByDate', JSON.stringify(timeByDate));
        })
        }
    }
  
    const onCheckout = async () => {
  
      if(timeByDate?.region === "") {
        areaValidate.classList.add('invalid');
        areaSelect.classList.add('invalid');
        regionElement.scrollIntoView({
          behavior: "smooth"
        })
        return;
      } else if(timeByDate?.district === ""){
        districtValidate.classList.add('invalid');
        districtSelect.classList.add('invalid');
        districtElement.scrollIntoView({
          behavior: "smooth"
        })
        return;
      } else if (timeByDate?.schedule?.time === "") {
        timeSlotValidate.classList.add('invalid');
        timeSlotElement.scrollIntoView({
          behavior: "smooth"
        })
        return;
      }


      const request = await fetch(window.Shopify.routes.root + "cart.js");
      const response = await request.json();
      let items = response.items;
      await fetch(window.Shopify.routes.root + "cart/clear.js", {
        method: "POST",
      });
      let totalAmount = 0;
      items = items.filter((item) => item.variant_id != 47151453765926);
      for (let i = 0; i < items.length; i++) {
        totalAmount += items[i].price * items[i].quantity;
      }
      const area = areaSelect.value;
      if (area && area === "Islands" && totalAmount < 100000) {
        let addItems = [];
        addItems.push({
          id: 47151453765926,
          quantity: 1,
        });
        const formData = {
          items: addItems,
        };
        await fetch(window.Shopify.routes.root + "cart/add.js", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        });
      }
      if (items && items.length > 0) {
        const noneSkuItems = items.filter((x) => !x.sku || x.sku === '');
        for (let i = 0; i < noneSkuItems.length; i++) {
          let addItems = [];
          addItems.push({
            id: noneSkuItems[i].variant_id,
            quantity: noneSkuItems[i].quantity,
          });
          const formData = {
            items: addItems,
          };
          await fetch(window.Shopify.routes.root + "cart/add.js", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          });
        }
        const hasSkuItems = items
          .filter((x) => x.sku && x.sku !== "")
          .sort((a, b) => {
            let fa = a.sku.toLowerCase(),
              fb = b.sku.toLowerCase();
            if (fa > fb) {
              return 1;
            }
            if (fa < fb) {
              return -1;
            }
            return 0;
          });
        for (let i = 0; i < hasSkuItems.length; i++) {
          let addItems = [];
          addItems.push({
            id: hasSkuItems[i].variant_id,
            quantity: hasSkuItems[i].quantity,
          });
          const formData = {
            items: addItems,
          };
          await fetch(window.Shopify.routes.root + "cart/add.js", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          });
        }
      }
      return (window.location.href = "/checkout");
    }

    const toggleOrderSummary = () => {
      const orderSummarySection = document.querySelector(".toggle-order-summary");
      const orderSummaryOld = document.querySelector(".pre-checkout-right");
      const orderSummaryText = orderSummarySection.querySelector(".toggle-order-summary-text");
      const orderSummaryArrow = orderSummarySection.querySelector(".arrow-down svg");

      if (orderSummarySection) {
        orderSummaryOld.classList.toggle("show");
        orderSummarySection.classList.toggle("show");

        if (orderSummarySection.classList.contains("show")) {
          orderSummaryText.innerText = "Hide order summary";
          orderSummaryArrow.style.rotate = "-90deg";
        } else {
          orderSummaryText.innerText = "Show order summary";
          orderSummaryArrow.style.rotate = "90deg";

        }
      }
    }
</script>
